#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#    SPDX-FileCopyrightText: 2024 Matheus Pereira Dias <matheuspd07@gmail.com>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#  This file is a derivative work from SYSeg (https://gitlab.com/monaco/syseg)
#  and contains modifications carried out by the following author(s):
#  Matheus Pereira Dias <matheuspd07@gmail.com>

 tyFS - Tiny File System
 ==============================

 tyFS is an extremely simple file system.

 For the purpose of illustration, this directory contains the program
 'tyfsedit.c', a file-manager application that can format, read and edit a
 tyFS-formatted disk image.   

 Contents
 ------------------------------

 The file manager program:

 * tyfsedit.c	A tyFS file manager.

 tyFS is a trivial file system that is intentionally simple to understand and
 easy to implement: each file occupies one single fixed-length cluster of
 contiguous sectors (files can't be split across multiple clusters and thus
 have a maximum allowed size); a file name has also a maximum length and
 is the only attribute associated with a file.

 The basic layout of a tyFS-formatted volume is like this:

  ---------------------------------------
 | Header | Directory | Data             |
  ---------------------------------------
 

  The Header region contains information about the volume, including
  
      - tyFS signature
      - total number of logical sectors (512-byte blocks) in the image
      - number of sectors reserved for the boot program (at least 1) 
      - maximum number of entries (file names) in the directory region
      - maximum allowed file size (in the Data region)
      - unused space

  The Directory region is a sequence of 32-bit entries used to store
  the file names: alphanumeric strings with no blanks.

  The first entry in the directory region refers to the first cluster
  (i.e. the content of the first file) and so on.

  That is it.

 Directions
 ------------------------------

 1) First, create a disk image

      make disk.img

   That should create a file 'disk' full of zeros.

 2) Build and execute the program:

   make
   ./tyfsedit

   Try the command 'help' and follow the instructions.

 3) Try some operations (use 'help' command):

     a) open the image file
     b) get the image info
     c) format image (when asked, choose 4 boot sectors and 16K file size)
     
    Observe the resulting number of file entries (89) and the unused space;
    go through the source code to understand how these values are computed.
    This will give you a grasp on how easy is to manipulate the file system.

    Then,

     d) list the files in the volume (none so far);
     e) copy a file from the host to the volume;
     f) list the volume again;
     g) copy other files from the host to the volume;
     h) copy a file from the volume to the host;
     i) delete a file, and list;
     k) dump the content of a file on the screen.

 4) Take some time to understand the program source.

   The file 'tyfsedit.c' implements the tyFS file manager.

   The structure 'fs_header_t' represents the volume header.

   See the source and code documentation to understand how each function
   works.

 5) A good exercise would be to implement a command 'rename' that renames
    a file in the volume. Give it a try.

 

 Bintools: convenience rules for inspecting binary files
 ------------------------------------------------------------
 
 SYSeg's Bintools is a collection of Makefile rules aimed as shortcut for
 invoking binary inspection utilities. It contains handy Make rules for
 disassembling objects, comparing files, creating bootable images, invoking
 platform emulators and other facilities. Some shortcuts are ad hoc rules
 crafted under poetic license and may depart from conventional Make usage.

 CONVENTIONS
 
 As a rule of thumb, a file named

     foo.bar            contains the working implementation
     foo-beta.bar	contains working but cumbersome/inelegant implementation
     foo-alpha.bar	contains incomplete or wrong implementation

 File extensions:

   -`hex`  ASCII file containing values in hexadecimal representation;

   -`asm`  manually written assembly code in Intel ASM format;

   -`S`    manually written assembly code in AT&T Gas format;

   -`s`    assembly code in AT&T Gas format generated by the compiler (gcc);

   -`o`    object code produced by the assembler;

   -`i`    pre-processed source code generated by the pre-processor (CPP)

   -`bin`  flat-binary file generated by the linker;

   -`iso`  ISO9660 (ECMA-119) file system intended for optical disk media (CD) 

   -`ld`   linker script (ld).


 Some examples allow alternative build recipes which can be selected
 by passing the command-line variable 'ALT=<number>' to 'make'. See bellow.

 NEEDED SOFTWARE

 In order to experiment with the examples in this section, the following
 pieces of software may be needed. The list indicates the lowest versions
 against which the project has been tested. Using a more recent version should
 be ok, but it is not absolutely guaranteed that results won't exhibit minor
 variations. Feedback is always appreciated.

 If required for a particular example, it is safe to use

 - Linux         5.13.0         (any decent ditribution)
 - gcc 	     	 9.3.0	        (the GNU compiler)
 - GNU binutils  2.34		(GNU assembler, linker, disassembler etc.) 
 - nasm		 2.14.02	(NASM assembler)
 - qemu		 4.2.1		(most probably qemu-system-i386)
 - gcc-multilib  9.3.0		(to compile 32-bit code in a 64-bit platform)
 - xorriso	 1.5.2-1	(depending on your computer's BIOS)
 - hexdump	 POSIX.2	(binary editor)
 
 CONVENIENCE RULES 


 * For building and inspecting binaries, use

   make					     Build the default target.

   make foo				     Build foo.

   make diss IMG=foo 			     Disassemble foo.

   	     	     			     Optionally,

					        ASM  = intel | att  (default)
						BIT  =    16 | 32   (default)

   make dump IMG=foo			     Show the raw contents of foo.
   
   make      			             Build everything (or make all)

   make clean			             Undo make all

   make diff foo bar baz		     Show graphical diff between files

   	     	     			     ASM and BIT variables apply


  * If any example involves the manipulation of a bootable image, use
  

   make run IMG=foo	             	     Run foo in the emulator

   make stick IMG=foo DEVICE=/dev/sdX        make a bootable USB stick


   SHORTCUTS

   For further convenience, the build script offers some ad hoc shortcuts:
   

   make foo/diss | foo/d		     disassemble .text as 32-bit AT&T

   make foo/diss intel|att		     disassemble as 32-bit Intel or AT&T
   make foo/diss 16|32			     disassemble as 16-bit or 32-bit
   make foo/diss intel|att 16|32	     disassemble as Intel|AT&T 16|32 bit
   make foo/diss 16|32 intel|att	     disassemble as Intel|AT&T 16|32 bit

   make foo/i16	       			     disassemble as Intel 16-bit
   make foo/a16 | foo/16  		     disassemble as AT&T  16-bit
   make foo/a32	| foo/32 | foo/a     	     disassemble as AT&T  32-bit
   make foo/i32	         | foo/i	     disassemble as Intel 32-bit

   		   			     In all disassembly rules, a
					     trailing '*' means disassemble all
					     sections, e.g. foo/d* foo/16* ...

   make foo/hex | foo/raw | foo/dump	     show raw contents in hexadecimal

   make foo/run				     test foo (mbr) with the emulator
   make foo/fd				     test foo (floppy) with the emulator

   make diffi16 | di16 | i16 foo bar baz     make diff with ASM=intel BIT=16
   make diffi32 | di32 | i32 foo bar baz     make diff with ASM=intel BIT=32
   make diffa16 | da16 | a16 foo bar baz     make diff with ASM=att BIT=16
   make diffa32 | da32 | a32 foo bar baz     make diff with ASM=att BIT=32

   make foo/stick dev    	   	     make stick IMG=foo DEVICE=dev

   make foo/l	  			     open foo in 'less' program

 

